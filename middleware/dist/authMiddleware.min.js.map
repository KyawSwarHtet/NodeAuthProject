{"version":3,"sources":["authMiddleware.js"],"names":["jwt","require","asyncHandler","req","res","next","token","decoded","regeneratorRuntime","async","_context","prev","protect","headers","authorization","startsWith","split","verify","concat","process","env","JWT_SECRET","awrap","User","findById","id","select","user","sent","status","json","t0","console","log","Error","stop","module","exports"],"mappings":"aAAA,IAAMA,IAAMC,QAAQ,gBACdC,aAAeD,QAAQ,yBADvBD,KAAMC,QAAQ,sBACdC,QAAYA,aAAW,SAAAC,EAAAC,EAAAC,GAAA,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAL,MAAA,KAAA,EAAA,GAGvBO,EAAAA,QAAUV,eAAaC,EAAAU,QAAAC,cAAAC,WAAA,UAHA,OAAAL,EAAAC,KAAA,EAGAL,EAAAH,EAAAU,QAAAC,cAAAE,MAAA,KAAA,GAAAT,EAAAP,IAAAiB,OAAAX,EAAA,GAAAY,OAAAC,QAAAC,IAAAC,aAHAX,EAAAL,KAAA,EAAAG,mBAAAc,MAGAC,KAAAC,SAAAjB,EAAAkB,IAAAC,OAAA,cAHAhB,EAAAL,KAAA,GAAA,MAAA,KAAA,EAGAF,EAAAwB,KAHAjB,EAAAkB,KAmBnBzB,EAAIwB,KARRtB,IAGAD,EAAAyB,OAAA,KAAAC,KAAA,iCAduBpB,EAAAL,KAAA,GAAA,MAAA,KAAA,GAAA,MAAAK,EAAAC,KAAA,GAAAD,EAAAqB,GAAArB,EAAA,MAAA,GAiBvBsB,QAAAC,IAAAvB,EAAAqB,IASA3B,EAAIyB,OAAO,KAvBY,IAAAK,MAAA,kBAHA,KAAA,GAAA,GAkBvB/B,EAlBuB,CAAAO,EAAAL,KAAA,GAAA,MAAA,MAgCzBD,EAAIyB,OAAO,KAbT,IAAI1B,MAAIwB,4BAnBe,KAAA,GAAA,IAAA,MAAA,OAAAjB,EAAAyB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QA+C7BC,OAAOC,QAAU,CAAEzB,QAAAA","file":"authMiddleware.min.js","sourcesContent":["const jwt = require(\"jsonwebtoken\");\r\nconst asyncHandler = require(\"express-async-handler\");\r\nconst User = require(\"../model/userModel\");\r\n\r\nconst protect = asyncHandler(async (req, res, next) => {\r\n  let token;\r\n\r\n  if (\r\n    req.headers.authorization &&\r\n    req.headers.authorization.startsWith(\"Bearer\")\r\n  ) {\r\n    try {\r\n      /* Get token from header */\r\n      token = req.headers.authorization.split(\" \")[1];\r\n\r\n      /* Verify token */\r\n      const decoded = jwt.verify(token, `${process.env.JWT_SECRET}`);\r\n\r\n      /* Get user from the token */\r\n      req.user = await User.findById(decoded.id).select(\"-password\");\r\n      if (req.user) {\r\n        next();\r\n      } else {\r\n        res.status(403).json(\"You are not allow to do that!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      res.status(401); //not autorized code\r\n      throw new Error(\"Not authorized\");\r\n    }\r\n  }\r\n\r\n  if (!token) {\r\n    res.status(404);\r\n    throw new Error(\"Not authorized, no token\");\r\n  }\r\n});\r\n\r\n// const verifyTokenAndAuthorization = (req, res, next) => {\r\n//   protect(req, res, () => {\r\n//     if (req.user.id === req.params.id || req.user.isAdmin) {\r\n//       next();\r\n//     } else {\r\n//       res.status(403).json(\"You are not allow to do that!\");\r\n//     }\r\n//   });\r\n// };\r\n\r\nmodule.exports = { protect };\r\n"]}