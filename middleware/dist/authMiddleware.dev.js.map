{"version":3,"sources":["authMiddleware.js"],"names":["jwt","require","asyncHandler","User","protect","req","res","next","headers","authorization","startsWith","token","split","decoded","verify","process","env","JWT_SECRET","findById","id","select","user","status","json","console","log","Error","module","exports"],"mappings":";;AAAA,IAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,uBAAD,CAA5B;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,oBAAD,CAApB;;AAEA,IAAMG,OAAO,GAAGF,YAAY,CAAC,iBAAOG,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAIzBF,GAAG,CAACG,OAAJ,CAAYC,aAAZ,IACAJ,GAAG,CAACG,OAAJ,CAAYC,aAAZ,CAA0BC,UAA1B,CAAqC,QAArC,CALyB;AAAA;AAAA;AAAA;;AAAA;;AAQvB;AACAC,UAAAA,KAAK,GAAGN,GAAG,CAACG,OAAJ,CAAYC,aAAZ,CAA0BG,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAR;AAEA;;AACMC,UAAAA,OAZiB,GAYPb,GAAG,CAACc,MAAJ,CAAWH,KAAX,YAAqBI,OAAO,CAACC,GAAR,CAAYC,UAAjC,EAZO;AAcvB;;AAduB;AAAA,0CAeNd,IAAI,CAACe,QAAL,CAAcL,OAAO,CAACM,EAAtB,EAA0BC,MAA1B,CAAiC,WAAjC,CAfM;;AAAA;AAevBf,UAAAA,GAAG,CAACgB,IAfmB;;AAgBvB,cAAIhB,GAAG,CAACgB,IAAR,EAAc;AACZd,YAAAA,IAAI;AACL,WAFD,MAEO;AACLD,YAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,+BAArB;AACD;;AApBsB;AAAA;;AAAA;AAAA;AAAA;AAsBvBC,UAAAA,OAAO,CAACC,GAAR;AACAnB,UAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAvBuB,CAuBN;;AAvBM,gBAwBjB,IAAII,KAAJ,CAAU,gBAAV,CAxBiB;;AAAA;AAAA,cA4BtBf,KA5BsB;AAAA;AAAA;AAAA;;AA6BzBL,UAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX;AA7ByB,gBA8BnB,IAAII,KAAJ,CAAU,0BAAV,CA9BmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAA5B,C,CAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AAAExB,EAAAA,OAAO,EAAPA;AAAF,CAAjB","sourcesContent":["const jwt = require(\"jsonwebtoken\");\r\nconst asyncHandler = require(\"express-async-handler\");\r\nconst User = require(\"../model/userModel\");\r\n\r\nconst protect = asyncHandler(async (req, res, next) => {\r\n  let token;\r\n\r\n  if (\r\n    req.headers.authorization &&\r\n    req.headers.authorization.startsWith(\"Bearer\")\r\n  ) {\r\n    try {\r\n      /* Get token from header */\r\n      token = req.headers.authorization.split(\" \")[1];\r\n\r\n      /* Verify token */\r\n      const decoded = jwt.verify(token, `${process.env.JWT_SECRET}`);\r\n\r\n      /* Get user from the token */\r\n      req.user = await User.findById(decoded.id).select(\"-password\");\r\n      if (req.user) {\r\n        next();\r\n      } else {\r\n        res.status(403).json(\"You are not allow to do that!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      res.status(401); //not autorized code\r\n      throw new Error(\"Not authorized\");\r\n    }\r\n  }\r\n\r\n  if (!token) {\r\n    res.status(404);\r\n    throw new Error(\"Not authorized, no token\");\r\n  }\r\n});\r\n\r\n// const verifyTokenAndAuthorization = (req, res, next) => {\r\n//   protect(req, res, () => {\r\n//     if (req.user.id === req.params.id || req.user.isAdmin) {\r\n//       next();\r\n//     } else {\r\n//       res.status(403).json(\"You are not allow to do that!\");\r\n//     }\r\n//   });\r\n// };\r\n\r\nmodule.exports = { protect };\r\n"],"file":"authMiddleware.dev.js"}