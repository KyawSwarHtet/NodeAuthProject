{"version":3,"sources":["userController.js"],"names":["jwt","require","fs","asyncHandler","mainPath","User","bcrypt","path","getAllUser","req","res","render","pageTitle","registerUser","body","username","email","password","trim","status","json","message","test","length","find","then","result","saltRounds","hash","hashedPassword","newUser","save","console","log","err","loginUser","findOne","user","compare","updateOne","_id","id","login","token","generateToken","sign","process","env","JWT_SECRET","expiresIn","updateUser","address","gender","$set","findById","updatedData","profilePicture","updateUserProfile","file","userDetail","filesArray","undefined","fileName","filename","filePath","fileType","mimetype","fileSize","fileSizeFormatter","size","push","unlink","join","bytes","decimal","dm","sizes","index","Math","floor","parseFloat","pow","toFixed","deleteUserAccount","findByIdAndRemove","exec","module","exports"],"mappings":"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","sourcesContent":["const jwt = require(\"jsonwebtoken\")\r\nconst fs = require(\"fs\");\r\nconst asyncHandler = require(\"express-async-handler\");\r\nconst mainPath = require(\"./baseFilepath\");\r\nconst User = require('../model/userModel')\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst path = require(\"path\");\r\n\r\n\r\n\r\nconst getAllUser = (req,res) => {\r\n    res.render(\"user/register\", {\r\n        pageTitle: \"Register\",\r\n        path:\"/register\"\r\n        \r\n    })\r\n}\r\n\r\n//Register user\r\n//@route Post/api/users/\r\nconst registerUser = asyncHandler(async (req, res) => {\r\n  let { username, email, password} = req.body;\r\n\r\n  username = username.trim();\r\n  email = email.trim();\r\n  password = password.trim();\r\n\r\n  if (!username || !email || !password) {\r\n  return  res.status(404).json({\r\n      status: \"FAILED\",\r\n      message: \"Empty input Fields!\",\r\n    });\r\n \r\n  }\r\n\r\n  //checking user name\r\n  if (!/^[a-zA-Z ]*$/.test(username)) {\r\n   return res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Invalid name entered\",\r\n    });\r\n  }\r\n\r\n  //checking email\r\n  if (!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(email)) {\r\n  return  res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Invalid email entered\",\r\n    });\r\n  }\r\n  //checking password length\r\n  if (password.length < 8) {\r\n   return res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Password is too short!\",\r\n    });\r\n  }\r\n  \r\n  //find user email from database\r\n    await User.find({ email })\r\n      .then((result) => {\r\n        if (result.length) {\r\n          //A user already exits\r\n        return  res.status(400).json({\r\n            status: \"FAILED\",\r\n            message: \"User with the provided email already exists\",\r\n          })\r\n\r\n        } \r\n          //to create a new user\r\n          //password handling\r\n          const saltRounds = 10;\r\n          bcrypt\r\n            .hash(password, saltRounds)\r\n            .then((hashedPassword) => {\r\n              const newUser = new User({\r\n                username,\r\n                email,\r\n                password: hashedPassword,\r\n              });\r\n              newUser\r\n                .save()\r\n                .then((result) => {\r\n                  //handle account verification\r\n                  console.log(\"user  post is success\");\r\n                 \r\n                  res.status(201).json(result);\r\n                  //  res.redirect(\"/register\");\r\n                 \r\n                })\r\n                .catch((err) => {\r\n                  res.status(400).json({\r\n                    status: \"FAILED\",\r\n                    message: \"An error occurred while saving user account!\",\r\n                  });\r\n                });\r\n            })\r\n            .catch((err) => {\r\n              res.status(400).json({\r\n                status: \"FAILED\",\r\n                message: \"An error occurred while hashing password!\",\r\n              });\r\n            });\r\n        \r\n      })\r\n      .catch((err) => {\r\n        res.status(400).json({\r\n          status: \"FAILED\",\r\n          message: \"An error occured while checking for existing user!\",\r\n        });\r\n      });\r\n  \r\n});\r\n\r\n//@route Post/api/users/login\r\nconst loginUser = asyncHandler(async (req, res) => {\r\n  let {  email, password } = req.body;\r\n  email = email.trim();\r\n  password = password.trim();\r\n\r\n  if (email == \"\" || password == \"\") {\r\n   return res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Empty credentials supplied\",\r\n    })\r\n  }\r\n\r\n    /* Check for user email*/\r\n    const user = await User.findOne({ email });\r\n    if (user && (await bcrypt.compare(password,user.password))) {\r\n     \r\n        User.updateOne({ _id: user.id }, { login: true })\r\n          .then(() => {\r\n            res.status(201).json({\r\n              _id: user.id,\r\n              username: user.username,\r\n              email: user.email,             \r\n              login: true,\r\n              token: generateToken(user._id),\r\n            });\r\n          })\r\n          .catch((err) => {\r\n            res.status(400).json({\r\n              status: \"FAILED\",\r\n              message: \"An error occur while updating login data update\",\r\n            });\r\n          });\r\n    } else {\r\n      res.status(400).json({\r\n        status: \"FAILED\",\r\n        message: \"Email, Password is something wrong\",\r\n      });\r\n    }\r\n  \r\n});\r\n\r\n/*Generate JWT */\r\nconst generateToken = (id) => {\r\n  return jwt.sign({ id }, `${process.env.JWT_SECRET}`, {\r\n    expiresIn: \"30d\",\r\n  });\r\n};\r\n\r\n//update user information fucntion\r\nconst updateUser = asyncHandler(async (req, res) => {\r\n  const { username,address,gender  } = req.body;\r\n    const id = req.user.id;\r\n\r\n  /* Check for user */\r\n  if (!req.user) {\r\n    return res.status(404).json({\r\n      status: \"FAILED\",\r\n        message: \"user not found\",    \r\n   })\r\n  }\r\n     //update user\r\n  await User.updateOne(\r\n    { _id: id },\r\n    {\r\n      $set: {\r\n        username: username,\r\n        login: true,\r\n        gender: gender,\r\n        address: address,\r\n      },\r\n    }\r\n  );\r\n  const updatedData = await User.findById(id);\r\n  res.status(200).json({\r\n    _id: id,\r\n    username: updatedData.username,\r\n    email: updatedData.email,\r\n    address: updatedData.address,\r\n    gender: updatedData.gender,\r\n    profilePicture: updatedData.profilePicture,\r\n    login: updatedData.login,\r\n  });\r\n});\r\n\r\n//update user profile img fucntion\r\nconst updateUserProfile = asyncHandler(async (req, res) => {\r\n  const profilePicture = req.file;\r\n  // console.log(\"profile picture\",profilePicture)\r\n    const id = req.user.id;\r\n \r\n  const userDetail = await User.findById(id);\r\n\r\n  /* Check for user */\r\n  if (!req.user) {\r\n    return res.status(404).json({\r\n      status: \"FAILED\",\r\n        message: \"user not found\",    \r\n   })\r\n  }\r\n\r\n  let filesArray = [];\r\n  if (profilePicture !== undefined && profilePicture !== []) {\r\n    const file = {\r\n      fileName: profilePicture.filename,\r\n      filePath: profilePicture.path,\r\n      fileType: profilePicture.mimetype,\r\n      fileSize: fileSizeFormatter(profilePicture.size,2),\r\n    };\r\n    filesArray.push(file);\r\n\r\n    if (userDetail.profilePicture[0] !== \"\") {\r\n         //for Image File to when when we do update picture\r\n      fs.unlink(path.join(mainPath, userDetail.profilePicture[0].filePath), (err) => {\r\n          if (err) {\r\n          return  console.log(\"error occur\", err);\r\n          }\r\n          console.log(\"file is deleted successully\");\r\n        });     \r\n    }\r\n    //update user\r\n  await User.updateOne(\r\n    { _id: id },\r\n    {\r\n      $set: {\r\n        profilePicture: filesArray,\r\n      },\r\n    }\r\n  );\r\n  }\r\n  const updatedData = await User.findById(id);\r\n  res.status(200).json({\r\n    _id: id,\r\n    username: updatedData.username,\r\n    email: updatedData.email,\r\n    address: updatedData.address,\r\n    gender: updatedData.gender,\r\n    profilePicture: updatedData.profilePicture,\r\n    login: updatedData.login,\r\n  });\r\n});\r\n\r\n//for img file format\r\nconst fileSizeFormatter = (bytes, decimal) => {\r\n  if (bytes === 0) {\r\n    return \"0 byte\";\r\n  }\r\n  const dm = decimal || 2;\r\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"YB\", \"ZB\"];\r\n  const index = Math.floor(Math.log(bytes) / Math.log(1000));\r\n  return (\r\n    parseFloat((bytes / Math.pow(1000, index)).toFixed(dm)) + \"-\" + sizes[index]\r\n  );\r\n};\r\n\r\n// for all deletepost\r\n//@route Delete/api/deletepost/:id\r\nconst deleteUserAccount = async (req, res) => {\r\n  // const id = req.params.id;\r\n  const id = req.user.id;\r\n  // console.log(\"id is\",id)\r\n  const userDetail = await User.findById(id);\r\n  // console.log(\"user detail id\",userDetail)\r\n\r\n  /* Check for user */\r\n  if (!req.user) {\r\n     return res.status(404).json({\r\n      status: \"FAILED\",\r\n        message: \"user not found\",    \r\n   }) \r\n  }\r\n  userDetail.profilePicture[0] === '' || userDetail.profilePicture.length === 0\r\n      ? console.log(\"file is empty file\")\r\n      :       \r\n       fs.unlink(path.join(mainPath, userDetail.profilePicture[0].filePath), (err) => {\r\n          // return fs.unlink(path.join(data.filePath), (err) => {\r\n            if (err) {\r\n            return  console.log(\"error occur\", err);\r\n            }\r\n             console.log(\"file is deleted successully\");\r\n          });\r\n\r\n  await User.findByIdAndRemove(id).exec();\r\n  res.status(200).json( \"User Account Deleted Successfully\");\r\n  // res.send();\r\n};\r\n\r\n\r\nmodule.exports = {getAllUser,registerUser,loginUser,updateUser,updateUserProfile,deleteUserAccount}"],"file":"userController.dev.js"}