{"version":3,"sources":["userController.js"],"names":["jwt","require","fs","asyncHandler","mainPath","User","bcrypt","path","getAllUser","req","res","render","pageTitle","registerUser","body","username","email","password","trim","status","json","message","test","length","find","then","result","saltRounds","hash","hashedPassword","newUser","save","console","log","redirect","err","loginUser","findOne","user","compare","updateOne","_id","id","login","token","generateToken","sign","process","env","JWT_SECRET","expiresIn","updateUser","address","gender","profilePicture","file","findById","userDetail","Error","filesArray","undefined","fileName","filename","filePath","fileType","mimetype","fileSize","fileSizeFormatter","size","push","forEach","element","map","data","index","unlink","join","$set","updatedData","bytes","decimal","dm","sizes","Math","floor","parseFloat","pow","toFixed","deleteUserAccount","findByIdAndRemove","exec","module","exports"],"mappings":";;AAAA,IAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAME,YAAY,GAAGF,OAAO,CAAC,uBAAD,CAA5B;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAC,gBAAD,CAAxB;;AACA,IAAMI,IAAI,GAAGJ,OAAO,CAAC,oBAAD,CAApB;;AACA,IAAMK,MAAM,GAAGL,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMM,IAAI,GAAGN,OAAO,CAAC,MAAD,CAApB;;AAGA,IAAMO,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAKC,GAAL,EAAa;AAC5BA,EAAAA,GAAG,CAACC,MAAJ,CAAW,eAAX,EAA4B;AACxBC,IAAAA,SAAS,EAAE,UADa;AAExBL,IAAAA,IAAI,EAAC;AAFmB,GAA5B;AAKH,CAND,C,CAQA;AACA;;;AACA,IAAMM,YAAY,GAAGV,YAAY,CAAC,iBAAOM,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACGD,GAAG,CAACK,IADP,EAC1BC,QAD0B,aAC1BA,QAD0B,EAChBC,KADgB,aAChBA,KADgB,EACTC,QADS,aACTA,QADS;AAGhCF,UAAAA,QAAQ,GAAGA,QAAQ,CAACG,IAAT,EAAX;AACAF,UAAAA,KAAK,GAAGA,KAAK,CAACE,IAAN,EAAR;AACAD,UAAAA,QAAQ,GAAGA,QAAQ,CAACC,IAAT,EAAX;;AALgC,gBAO5B,CAACH,QAAD,IAAa,CAACC,KAAd,IAAuB,CAACC,QAPI;AAAA;AAAA;AAAA;;AAQ9BP,UAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,YAAAA,MAAM,EAAE,QADW;AAEnBE,YAAAA,OAAO,EAAE;AAFU,WAArB;AAR8B;AAAA;;AAAA;AAAA,cAYpB,eAAeC,IAAf,CAAoBP,QAApB,CAZoB;AAAA;AAAA;AAAA;;AAa9BL,UAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,YAAAA,MAAM,EAAE,QADW;AAEnBE,YAAAA,OAAO,EAAE;AAFU,WAArB;AAb8B;AAAA;;AAAA;AAAA,cAiBpB,mCAAmCC,IAAnC,CAAwCN,KAAxC,CAjBoB;AAAA;AAAA;AAAA;;AAkB9BN,UAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,YAAAA,MAAM,EAAE,QADW;AAEnBE,YAAAA,OAAO,EAAE;AAFU,WAArB;AAlB8B;AAAA;;AAAA;AAAA,gBAsBrBJ,QAAQ,CAACM,MAAT,GAAkB,CAtBG;AAAA;AAAA;AAAA;;AAuB9Bb,UAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,YAAAA,MAAM,EAAE,QADW;AAEnBE,YAAAA,OAAO,EAAE;AAFU,WAArB;AAvB8B;AAAA;;AAAA;AAAA;AAAA,0CA4BxBhB,IAAI,CAACmB,IAAL,CAAU;AAAER,YAAAA,KAAK,EAALA;AAAF,WAAV,EACHS,IADG,CACE,UAACC,MAAD,EAAY;AAChB,gBAAIA,MAAM,CAACH,MAAX,EAAmB;AACjB;AAEAb,cAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,gBAAAA,MAAM,EAAE,QADW;AAEnBE,gBAAAA,OAAO,EAAE;AAFU,eAArB;AAID,aAPD,MAOO;AACL;AAEA;AACA,kBAAMM,UAAU,GAAG,EAAnB;AACArB,cAAAA,MAAM,CACHsB,IADH,CACQX,QADR,EACkBU,UADlB,EAEGF,IAFH,CAEQ,UAACI,cAAD,EAAoB;AACxB,oBAAMC,OAAO,GAAG,IAAIzB,IAAJ,CAAS;AACvBU,kBAAAA,QAAQ,EAARA,QADuB;AAEvBC,kBAAAA,KAAK,EAALA,KAFuB;AAGvBC,kBAAAA,QAAQ,EAAEY;AAHa,iBAAT,CAAhB;AAKAC,gBAAAA,OAAO,CACJC,IADH,GAEGN,IAFH,CAEQ,UAACC,MAAD,EAAY;AAChB;AACAM,kBAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAFgB,CAIhB;;AACCvB,kBAAAA,GAAG,CAACwB,QAAJ,CAAa,WAAb;AAEF,iBATH,WAUS,UAACC,GAAD,EAAS;AACdzB,kBAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,oBAAAA,MAAM,EAAE,QADW;AAEnBE,oBAAAA,OAAO,EAAE;AAFU,mBAArB;AAID,iBAfH;AAgBD,eAxBH,WAyBS,UAACc,GAAD,EAAS;AACdzB,gBAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,kBAAAA,MAAM,EAAE,QADW;AAEnBE,kBAAAA,OAAO,EAAE;AAFU,iBAArB;AAID,eA9BH;AA+BD;AACF,WA9CG,WA+CG,UAACc,GAAD,EAAS;AACdzB,YAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,cAAAA,MAAM,EAAE,QADW;AAEnBE,cAAAA,OAAO,EAAE;AAFU,aAArB;AAID,WApDG,CA5BwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAAjC,C,CAoFA;;AACA,IAAMe,SAAS,GAAGjC,YAAY,CAAC,kBAAOM,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uBACFD,GAAG,CAACK,IADF,EACtBE,KADsB,cACtBA,KADsB,EACfC,QADe,cACfA,QADe;AAE7BD,UAAAA,KAAK,GAAGA,KAAK,CAACE,IAAN,EAAR;AACAD,UAAAA,QAAQ,GAAGA,QAAQ,CAACC,IAAT,EAAX;;AAH6B,gBAKzBF,KAAK,IAAI,EAAT,IAAeC,QAAQ,IAAI,EALF;AAAA;AAAA;AAAA;;AAM3BP,UAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,YAAAA,MAAM,EAAE,QADW;AAEnBE,YAAAA,OAAO,EAAE;AAFU,WAArB;AAN2B;AAAA;;AAAA;AAAA;AAAA,0CAYRhB,IAAI,CAACgC,OAAL,CAAa;AAAErB,YAAAA,KAAK,EAALA;AAAF,WAAb,CAZQ;;AAAA;AAYrBsB,UAAAA,IAZqB;AAAA,yBAavBA,IAbuB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,0CAaRhC,MAAM,CAACiC,OAAP,CAAetB,QAAf,EAAwBqB,IAAI,CAACrB,QAA7B,CAbQ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAevBZ,UAAAA,IAAI,CAACmC,SAAL,CAAe;AAAEC,YAAAA,GAAG,EAAEH,IAAI,CAACI;AAAZ,WAAf,EAAiC;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAjC,EACGlB,IADH,CACQ,YAAM;AACVf,YAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBqB,cAAAA,GAAG,EAAEH,IAAI,CAACI,EADS;AAEnB3B,cAAAA,QAAQ,EAAEuB,IAAI,CAACvB,QAFI;AAGnBC,cAAAA,KAAK,EAAEsB,IAAI,CAACtB,KAHO;AAInB2B,cAAAA,KAAK,EAAE,IAJY;AAKnBC,cAAAA,KAAK,EAAEC,aAAa,CAACP,IAAI,CAACG,GAAN;AALD,aAArB;AAOD,WATH,WAUS,UAACN,GAAD,EAAS;AACdzB,YAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,cAAAA,MAAM,EAAE,QADW;AAEnBE,cAAAA,OAAO,EAAE;AAFU,aAArB;AAID,WAfH;AAfuB;AAAA;;AAAA;AAgCzBX,UAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,YAAAA,MAAM,EAAE,QADW;AAEnBE,YAAAA,OAAO,EAAE;AAFU,WAArB;;AAhCyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAA9B;AAwCA;;AACA,IAAMwB,aAAa,GAAG,SAAhBA,aAAgB,CAACH,EAAD,EAAQ;AAC5B,SAAO1C,GAAG,CAAC8C,IAAJ,CAAS;AAAEJ,IAAAA,EAAE,EAAFA;AAAF,GAAT,YAAoBK,OAAO,CAACC,GAAR,CAAYC,UAAhC,GAA8C;AACnDC,IAAAA,SAAS,EAAE;AADwC,GAA9C,CAAP;AAGD,CAJD,C,CAMA;;;AACA,IAAMC,UAAU,GAAGhD,YAAY,CAAC,kBAAOM,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uBACeD,GAAG,CAACK,IADnB,EACtBC,QADsB,cACtBA,QADsB,EACZC,KADY,cACZA,KADY,EACLoC,OADK,cACLA,OADK,EACGC,MADH,cACGA,MADH;AAExBC,UAAAA,cAFwB,GAEP7C,GAAG,CAAC8C,IAFG;AAItBb,UAAAA,EAJsB,GAIjBjC,GAAG,CAAC6B,IAAJ,CAASI,EAJQ,EAK9B;AACA;AAGA;;AAT8B;AAAA,0CAULrC,IAAI,CAACmD,QAAL,CAAcd,EAAd,CAVK;;AAAA;AAUxBe,UAAAA,UAVwB;;AAAA,cAYzBhD,GAAG,CAAC6B,IAZqB;AAAA;AAAA;AAAA;;AAa5B5B,UAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX;AAb4B,gBActB,IAAIuC,KAAJ,CAAU,gBAAV,CAdsB;;AAAA;AAiB1BC,UAAAA,UAjB0B,GAiBb,EAjBa;;AAkB9B,cAAIL,cAAc,KAAKM,SAAnB,IAAgCN,cAAc,KAAK,EAAvD,EAA2D;AACnDC,YAAAA,IADmD,GAC5C;AACXM,cAAAA,QAAQ,EAAEP,cAAc,CAACQ,QADd;AAEXC,cAAAA,QAAQ,EAAET,cAAc,CAAC/C,IAFd;AAGXyD,cAAAA,QAAQ,EAAEV,cAAc,CAACW,QAHd;AAIXC,cAAAA,QAAQ,EAAEC,iBAAiB,CAACb,cAAc,CAACc,IAAhB,EAAqB,CAArB;AAJhB,aAD4C;AAOzDT,YAAAA,UAAU,CAACU,IAAX,CAAgBd,IAAhB;AACD,WA1B6B,CA4B9B;AAEA;;;AACA,WAACD,cAAc,KAAK,EAAnB,IAAyBA,cAAc,KAAKM,SAA7C,KACAH,UAAU,CAACH,cAAX,CAA0B,CAA1B,MAAiC,EADjC,GAEIG,UAAU,CAACH,cAAX,CAA0BgB,OAA1B,CAAkC,UAACC,OAAD,EAAa;AAC7C,gBAAMhB,IAAI,GAAG;AACXM,cAAAA,QAAQ,EAAEU,OAAO,CAACV,QADP;AAEXE,cAAAA,QAAQ,EAAEQ,OAAO,CAACR,QAFP;AAGXC,cAAAA,QAAQ,EAAEO,OAAO,CAACP,QAHP;AAIXE,cAAAA,QAAQ,EAAEK,OAAO,CAACL;AAJP,aAAb;AAMAP,YAAAA,UAAU,CAACU,IAAX,CAAgBd,IAAhB;AACD,WARD,CAFJ,GAWIE,UAAU,CAACH,cAAX,CAA0B,CAA1B,MAAiC,EAAjC,IACAG,UAAU,CAACH,cAAX,CAA0B/B,MAA1B,KAAqC,CADrC,GAEAS,OAAO,CAACC,GAAR,CAAY,+CAAZ,CAFA,GAGAwB,UAAU,CAACH,cAAX,CAA0BkB,GAA1B,CAA8B,kBAAOC,IAAP,EAAaC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,sDAIvBxE,EAAE,CAACyE,MAAH,CAAUpE,IAAI,CAACqE,IAAL,CAAUxE,QAAV,EAAoBqE,IAAI,CAACV,QAAzB,CAAV,EAA8C,UAAC5B,GAAD,EAAS;AAC1D,0BAAIA,GAAJ,EAAS;AACPH,wBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BE,GAA3B;AACD;;AACD,6BAAOH,OAAO,CAACC,GAAR,CAAY,6BAAZ,CAAP;AACD,qBALI,CAJuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA9B,CAdJ,CA/B8B,CA0D9B;;AA1D8B;AAAA,0CA2DxB5B,IAAI,CAACmC,SAAL,CACJ;AAAEC,YAAAA,GAAG,EAAEC;AAAP,WADI,EAEJ;AACEmC,YAAAA,IAAI,EAAE;AACJ9D,cAAAA,QAAQ,EAAEA,QADN;AAEJC,cAAAA,KAAK,EAAEA,KAFH;AAGJ2B,cAAAA,KAAK,EAAE,IAHH;AAIJU,cAAAA,MAAM,EAAEA,MAJJ;AAKJD,cAAAA,OAAO,EAAEA,OALL;AAMJE,cAAAA,cAAc,EAAEK,UAAU,GAAGA,UAAH,GAAgB;AANtC;AADR,WAFI,CA3DwB;;AAAA;AAAA;AAAA,0CAyEJtD,IAAI,CAACmD,QAAL,CAAcd,EAAd,CAzEI;;AAAA;AAyExBoC,UAAAA,WAzEwB;AA0E9BpE,UAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBqB,YAAAA,GAAG,EAAEC,EADc;AAEnB3B,YAAAA,QAAQ,EAAE+D,WAAW,CAAC/D,QAFH;AAGnBC,YAAAA,KAAK,EAAE8D,WAAW,CAAC9D,KAHA;AAInBoC,YAAAA,OAAO,EAAE0B,WAAW,CAAC1B,OAJF;AAKnBC,YAAAA,MAAM,EAAEyB,WAAW,CAACzB,MALD;AAMnBC,YAAAA,cAAc,EAAEwB,WAAW,CAACxB,cANT;AAOnBX,YAAAA,KAAK,EAAEmC,WAAW,CAACnC;AAPA,WAArB,EA1E8B,CAmF9B;AACA;;AApF8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAA/B,C,CAuFA;;AACA,IAAMwB,iBAAiB,GAAG,SAApBA,iBAAoB,CAACY,KAAD,EAAQC,OAAR,EAAoB;AAC5C,MAAID,KAAK,KAAK,CAAd,EAAiB;AACf,WAAO,QAAP;AACD;;AACD,MAAME,EAAE,GAAGD,OAAO,IAAI,CAAtB;AACA,MAAME,KAAK,GAAG,CAAC,OAAD,EAAU,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C,IAA9C,EAAoD,IAApD,CAAd;AACA,MAAMR,KAAK,GAAGS,IAAI,CAACC,KAAL,CAAWD,IAAI,CAAClD,GAAL,CAAS8C,KAAT,IAAkBI,IAAI,CAAClD,GAAL,CAAS,IAAT,CAA7B,CAAd;AACA,SACEoD,UAAU,CAAC,CAACN,KAAK,GAAGI,IAAI,CAACG,GAAL,CAAS,IAAT,EAAeZ,KAAf,CAAT,EAAgCa,OAAhC,CAAwCN,EAAxC,CAAD,CAAV,GAA0D,GAA1D,GAAgEC,KAAK,CAACR,KAAD,CADvE;AAGD,CAVD,C,CAYA;AACA;;;AACA,IAAMc,iBAAiB,GAAG,SAApBA,iBAAoB,CAAO/E,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACxB;AACMgC,UAAAA,EAFkB,GAEbjC,GAAG,CAAC6B,IAAJ,CAASI,EAFI,EAGxB;;AAHwB;AAAA,0CAICrC,IAAI,CAACmD,QAAL,CAAcd,EAAd,CAJD;;AAAA;AAIlBe,UAAAA,UAJkB;;AAAA,cAQnBhD,GAAG,CAAC6B,IARe;AAAA;AAAA;AAAA;;AAStB5B,UAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX;AATsB,gBAUhB,IAAIuC,KAAJ,CAAU,gBAAV,CAVgB;;AAAA;AAYtBD,UAAAA,UAAU,CAACH,cAAX,KAA8B,EAA9B,IAAkCG,UAAU,CAACH,cAAX,CAA0B,CAA1B,MAAiC,EAAnE,IAAyEG,UAAU,CAACH,cAAX,CAA0B/B,MAA1B,KAAqC,CAA9G,GACIS,OAAO,CAACC,GAAR,CAAY,oBAAZ,CADJ,GAEIwB,UAAU,CAACH,cAAX,CAA0BkB,GAA1B,CAA8B,kBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA,sDAErBvE,EAAE,CAACyE,MAAH,CAAUpE,IAAI,CAACqE,IAAL,CAAUxE,QAAV,EAAoBqE,IAAI,CAACV,QAAzB,CAAV,EAA8C,UAAC5B,GAAD,EAAS;AAC9D;AACE,0BAAIA,GAAJ,EAAS;AACPH,wBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BE,GAA3B;AACD;;AAED,6BAAOH,OAAO,CAACC,GAAR,CAAY,6BAAZ,CAAP;AACD,qBAPM,CAFqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA9B,CAFJ,CAZsB,CA0BxB;AACA;;AA3BwB;AAAA,0CA6BlB5B,IAAI,CAACoF,iBAAL,CAAuB/C,EAAvB,EAA2BgD,IAA3B,EA7BkB;;AAAA;AA8BxBhF,UAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,mCAAtB,EA9BwB,CA+BxB;;AA/BwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;AAqCAuE,MAAM,CAACC,OAAP,GAAiB;AAACpF,EAAAA,UAAU,EAAVA,UAAD;AAAYK,EAAAA,YAAY,EAAZA,YAAZ;AAAyBuB,EAAAA,SAAS,EAATA,SAAzB;AAAmCe,EAAAA,UAAU,EAAVA,UAAnC;AAA8CqC,EAAAA,iBAAiB,EAAjBA;AAA9C,CAAjB","sourcesContent":["const jwt = require(\"jsonwebtoken\")\r\nconst fs = require(\"fs\");\r\nconst asyncHandler = require(\"express-async-handler\");\r\nconst mainPath = require(\"./baseFilepath\");\r\nconst User = require('../model/userModel')\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst path = require(\"path\");\r\n\r\n\r\nconst getAllUser = (req,res) => {\r\n    res.render(\"user/register\", {\r\n        pageTitle: \"Register\",\r\n        path:\"/register\"\r\n        \r\n    })\r\n}\r\n\r\n//Register user\r\n//@route Post/api/users/\r\nconst registerUser = asyncHandler(async (req, res) => {\r\n  let { username, email, password} = req.body;\r\n\r\n  username = username.trim();\r\n  email = email.trim();\r\n  password = password.trim();\r\n\r\n  if (!username || !email || !password) {\r\n    res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Empty input Fields!\",\r\n    });\r\n  } else if (!/^[a-zA-Z ]*$/.test(username)) {\r\n    res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Invalid name entered\",\r\n    });\r\n  } else if (!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(email)) {\r\n    res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Invalid email entered\",\r\n    });\r\n  } else if (password.length < 8) {\r\n    res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Password is too short!\",\r\n    });\r\n  } else {\r\n    await User.find({ email })\r\n      .then((result) => {\r\n        if (result.length) {\r\n          //A user already exits\r\n\r\n          res.status(400).json({\r\n            status: \"FAILED\",\r\n            message: \"User with the provided email already exists\",\r\n          });\r\n        } else {\r\n          //to create a new user\r\n\r\n          //password handling\r\n          const saltRounds = 10;\r\n          bcrypt\r\n            .hash(password, saltRounds)\r\n            .then((hashedPassword) => {\r\n              const newUser = new User({\r\n                username,\r\n                email,\r\n                password: hashedPassword,\r\n              });\r\n              newUser\r\n                .save()\r\n                .then((result) => {\r\n                  //handle account verification\r\n                  console.log(\"user  post is success\");\r\n                 \r\n                  // res.status(201).json(result);\r\n                   res.redirect(\"/register\");\r\n                 \r\n                })\r\n                .catch((err) => {\r\n                  res.status(400).json({\r\n                    status: \"FAILED\",\r\n                    message: \"An error occurred while saving user account!\",\r\n                  });\r\n                });\r\n            })\r\n            .catch((err) => {\r\n              res.status(400).json({\r\n                status: \"FAILED\",\r\n                message: \"An error occurred while hashing password!\",\r\n              });\r\n            });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        res.status(400).json({\r\n          status: \"FAILED\",\r\n          message: \"An error occured while checking for existing user!\",\r\n        });\r\n      });\r\n  }\r\n});\r\n\r\n//@route Post/api/users/login\r\nconst loginUser = asyncHandler(async (req, res) => {\r\n  let {  email, password } = req.body;\r\n  email = email.trim();\r\n  password = password.trim();\r\n\r\n  if (email == \"\" || password == \"\") {\r\n    res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Empty credentials supplied\",\r\n    });\r\n  } else {\r\n    /* Check for user email*/\r\n    const user = await User.findOne({ email });\r\n    if (user && (await bcrypt.compare(password,user.password))) {\r\n     \r\n        User.updateOne({ _id: user.id }, { login: true })\r\n          .then(() => {\r\n            res.status(201).json({\r\n              _id: user.id,\r\n              username: user.username,\r\n              email: user.email,             \r\n              login: true,\r\n              token: generateToken(user._id),\r\n            });\r\n          })\r\n          .catch((err) => {\r\n            res.status(400).json({\r\n              status: \"FAILED\",\r\n              message: \"An error occur while updating login data update\",\r\n            });\r\n          });\r\n    } else {\r\n      res.status(400).json({\r\n        status: \"FAILED\",\r\n        message: \"Email, Password is something wrong\",\r\n      });\r\n    }\r\n  }\r\n});\r\n\r\n/*Generate JWT */\r\nconst generateToken = (id) => {\r\n  return jwt.sign({ id }, `${process.env.JWT_SECRET}`, {\r\n    expiresIn: \"30d\",\r\n  });\r\n};\r\n\r\n//update user fucntion\r\nconst updateUser = asyncHandler(async (req, res) => {\r\n  const { username, email, address,gender  } = req.body;\r\n  const profilePicture = req.file;\r\n\r\n    const id = req.user.id;\r\n  // console.log(\"profile picture is\", profilePicture);\r\n  // console.log(\"Id is\",id);\r\n\r\n\r\n  // console.log(\"user profile picture\", profilePicture);\r\n  const userDetail = await User.findById(id);\r\n  /* Check for user */\r\n  if (!req.user) {\r\n    res.status(404);\r\n    throw new Error(\"user not found\");\r\n  }\r\n\r\n  let filesArray = [];\r\n  if (profilePicture !== undefined && profilePicture !== []) {\r\n    const file = {\r\n      fileName: profilePicture.filename,\r\n      filePath: profilePicture.path,\r\n      fileType: profilePicture.mimetype,\r\n      fileSize: fileSizeFormatter(profilePicture.size,2),\r\n    };\r\n    filesArray.push(file);\r\n  }\r\n\r\n  // console.log(\"user Detail profile\", userDetail.profilePicture);\r\n\r\n  //checking img and remove old img\r\n  (profilePicture === [] || profilePicture === undefined) &&\r\n  userDetail.profilePicture[0] !== \"\"\r\n    ? userDetail.profilePicture.forEach((element) => {\r\n        const file = {\r\n          fileName: element.fileName,\r\n          filePath: element.filePath,\r\n          fileType: element.fileType,\r\n          fileSize: element.fileSize,\r\n        };\r\n        filesArray.push(file);\r\n      })\r\n    : userDetail.profilePicture[0] === \"\" ||\r\n      userDetail.profilePicture.length === 0\r\n    ? console.log(\"new user is updated without new profile image\")\r\n    : userDetail.profilePicture.map(async (data, index) => {\r\n        \r\n        \r\n      //for Image File to when when we do update picture\r\n      return fs.unlink(path.join(mainPath, data.filePath), (err) => {\r\n          if (err) {\r\n            console.log(\"error occur\", err);\r\n          }\r\n          return console.log(\"file is deleted successully\");\r\n        });\r\n        \r\n      });\r\n\r\n  //update user\r\n  await User.updateOne(\r\n    { _id: id },\r\n    {\r\n      $set: {\r\n        username: username,\r\n        email: email,\r\n        login: true,\r\n        gender: gender,\r\n        address: address,\r\n        profilePicture: filesArray ? filesArray : [],\r\n      },\r\n    }\r\n  );\r\n\r\n  const updatedData = await User.findById(id);\r\n  res.status(200).json({\r\n    _id: id,\r\n    username: updatedData.username,\r\n    email: updatedData.email,\r\n    address: updatedData.address,\r\n    gender: updatedData.gender,\r\n    profilePicture: updatedData.profilePicture,\r\n    login: updatedData.login,\r\n  });\r\n  // console.log(\"request user token is\", token);\r\n  // console.log(\"updated data user result is\", updatedData);\r\n});\r\n\r\n//for img file format\r\nconst fileSizeFormatter = (bytes, decimal) => {\r\n  if (bytes === 0) {\r\n    return \"0 byte\";\r\n  }\r\n  const dm = decimal || 2;\r\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"YB\", \"ZB\"];\r\n  const index = Math.floor(Math.log(bytes) / Math.log(1000));\r\n  return (\r\n    parseFloat((bytes / Math.pow(1000, index)).toFixed(dm)) + \"-\" + sizes[index]\r\n  );\r\n};\r\n\r\n// for all deletepost\r\n//@route Delete/api/deletepost/:id\r\nconst deleteUserAccount = async (req, res) => {\r\n  // const id = req.params.id;\r\n  const id = req.user.id;\r\n  // console.log(\"id is\",id)\r\n  const userDetail = await User.findById(id);\r\n  // console.log(\"user detail id\",userDetail)\r\n\r\n  /* Check for user */\r\n  if (!req.user) {\r\n    res.status(401);\r\n    throw new Error(\"user not found\");\r\n  }\r\n    userDetail.profilePicture === []||userDetail.profilePicture[0] === '' || userDetail.profilePicture.length === 0\r\n      ? console.log(\"file is empty file\")\r\n      : userDetail.profilePicture.map(async (data) => {\r\n          \r\n          return fs.unlink(path.join(mainPath, data.filePath), (err) => {\r\n          // return fs.unlink(path.join(data.filePath), (err) => {\r\n            if (err) {\r\n              console.log(\"error occur\", err);\r\n            }\r\n\r\n            return console.log(\"file is deleted successully\");\r\n          });\r\n        });\r\n\r\n  //if someone delete post , the favorite data also need to delete\r\n  // await FavModel.deleteMany({ postId: id }).exec();\r\n\r\n  await User.findByIdAndRemove(id).exec();\r\n  res.status(200).json( \"User Account Deleted Successfully\");\r\n  // res.send();\r\n};\r\n\r\n\r\n\r\n\r\nmodule.exports = {getAllUser,registerUser,loginUser,updateUser,deleteUserAccount}"],"file":"userController.dev.js"}