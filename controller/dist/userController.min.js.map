{"version":3,"sources":["userController.js"],"names":["jwt","require","fs","mainPath","User","bcrypt","asyncHandler","getAllUser","req","res","render","pageTitle","path","_req$body","username","email","password","regeneratorRuntime","async","_context","prev","next","body","trim","status","json","message","test","length","awrap","find","then","result","hash","hashedPassword","console","log","err","stop","loginUser","_req$body2","user","_context2","newUser","findOne","sent","t0","compare","updateOne","_id","id","login","token","generateToken","sign","concat","process","env","JWT_SECRET","expiresIn","updateUser","_req$body3","address","gender","profilePicture","userDetail","filesArray","file","updatedData","_context4","findById","Error","undefined","filename","filePath","fileType","mimetype","fileSize","fileSizeFormatter","size","push","map","data","_context3","abrupt","join","forEach","element","fileName","bytes","decimal","dm","Math","parseFloat","pow","index","toFixed","_context6","_context5","module","exports","registerUser","deleteUserAccount"],"mappings":"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","file":"userController.min.js","sourcesContent":["const jwt = require(\"jsonwebtoken\")\r\nconst fs = require(\"fs\");\r\nconst asyncHandler = require(\"express-async-handler\");\r\nconst mainPath = require(\"./baseFilepath\");\r\nconst User = require('../model/userModel')\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst path = require(\"path\");\r\n\r\n\r\nconst getAllUser = (req,res) => {\r\n    res.render(\"user/register\", {\r\n        pageTitle: \"Register\",\r\n        path:\"/register\"\r\n        \r\n    })\r\n}\r\n\r\n//Register user\r\n//@route Post/api/users/\r\nconst registerUser = asyncHandler(async (req, res) => {\r\n  let { username, email, password} = req.body;\r\n\r\n  username = username.trim();\r\n  email = email.trim();\r\n  password = password.trim();\r\n\r\n  if (!username || !email || !password) {\r\n    res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Empty input Fields!\",\r\n    });\r\n  } else if (!/^[a-zA-Z ]*$/.test(username)) {\r\n    res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Invalid name entered\",\r\n    });\r\n  } else if (!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(email)) {\r\n    res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Invalid email entered\",\r\n    });\r\n  } else if (password.length < 8) {\r\n    res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Password is too short!\",\r\n    });\r\n  } else {\r\n    await User.find({ email })\r\n      .then((result) => {\r\n        if (result.length) {\r\n          //A user already exits\r\n\r\n          res.status(400).json({\r\n            status: \"FAILED\",\r\n            message: \"User with the provided email already exists\",\r\n          });\r\n        } else {\r\n          //to create a new user\r\n\r\n          //password handling\r\n          const saltRounds = 10;\r\n          bcrypt\r\n            .hash(password, saltRounds)\r\n            .then((hashedPassword) => {\r\n              const newUser = new User({\r\n                username,\r\n                email,\r\n                password: hashedPassword,\r\n              });\r\n              newUser\r\n                .save()\r\n                .then((result) => {\r\n                  //handle account verification\r\n                  console.log(\"user  post is success\");\r\n                 \r\n                  // res.status(201).json(result);\r\n                   res.redirect(\"/register\");\r\n                 \r\n                })\r\n                .catch((err) => {\r\n                  res.status(400).json({\r\n                    status: \"FAILED\",\r\n                    message: \"An error occurred while saving user account!\",\r\n                  });\r\n                });\r\n            })\r\n            .catch((err) => {\r\n              res.status(400).json({\r\n                status: \"FAILED\",\r\n                message: \"An error occurred while hashing password!\",\r\n              });\r\n            });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        res.status(400).json({\r\n          status: \"FAILED\",\r\n          message: \"An error occured while checking for existing user!\",\r\n        });\r\n      });\r\n  }\r\n});\r\n\r\n//@route Post/api/users/login\r\nconst loginUser = asyncHandler(async (req, res) => {\r\n  let {  email, password } = req.body;\r\n  email = email.trim();\r\n  password = password.trim();\r\n\r\n  if (email == \"\" || password == \"\") {\r\n    res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Empty credentials supplied\",\r\n    });\r\n  } else {\r\n    /* Check for user email*/\r\n    const user = await User.findOne({ email });\r\n    if (user && (await bcrypt.compare(password,user.password))) {\r\n     \r\n        User.updateOne({ _id: user.id }, { login: true })\r\n          .then(() => {\r\n            res.status(201).json({\r\n              _id: user.id,\r\n              username: user.username,\r\n              email: user.email,             \r\n              login: true,\r\n              token: generateToken(user._id),\r\n            });\r\n          })\r\n          .catch((err) => {\r\n            res.status(400).json({\r\n              status: \"FAILED\",\r\n              message: \"An error occur while updating login data update\",\r\n            });\r\n          });\r\n    } else {\r\n      res.status(400).json({\r\n        status: \"FAILED\",\r\n        message: \"Email, Password is something wrong\",\r\n      });\r\n    }\r\n  }\r\n});\r\n\r\n/*Generate JWT */\r\nconst generateToken = (id) => {\r\n  return jwt.sign({ id }, `${process.env.JWT_SECRET}`, {\r\n    expiresIn: \"30d\",\r\n  });\r\n};\r\n\r\n//update user fucntion\r\nconst updateUser = asyncHandler(async (req, res) => {\r\n  const { username, email, address,gender  } = req.body;\r\n  const profilePicture = req.file;\r\n\r\n    const id = req.user.id;\r\n  // console.log(\"profile picture is\", profilePicture);\r\n  // console.log(\"Id is\",id);\r\n\r\n\r\n  // console.log(\"user profile picture\", profilePicture);\r\n  const userDetail = await User.findById(id);\r\n  /* Check for user */\r\n  if (!req.user) {\r\n    res.status(404);\r\n    throw new Error(\"user not found\");\r\n  }\r\n\r\n  let filesArray = [];\r\n  if (profilePicture !== undefined && profilePicture !== []) {\r\n    const file = {\r\n      fileName: profilePicture.filename,\r\n      filePath: profilePicture.path,\r\n      fileType: profilePicture.mimetype,\r\n      fileSize: fileSizeFormatter(profilePicture.size,2),\r\n    };\r\n    filesArray.push(file);\r\n  }\r\n\r\n  // console.log(\"user Detail profile\", userDetail.profilePicture);\r\n\r\n  //checking img and remove old img\r\n  (profilePicture === [] || profilePicture === undefined) &&\r\n  userDetail.profilePicture[0] !== \"\"\r\n    ? userDetail.profilePicture.forEach((element) => {\r\n        const file = {\r\n          fileName: element.fileName,\r\n          filePath: element.filePath,\r\n          fileType: element.fileType,\r\n          fileSize: element.fileSize,\r\n        };\r\n        filesArray.push(file);\r\n      })\r\n    : userDetail.profilePicture[0] === \"\" ||\r\n      userDetail.profilePicture.length === 0\r\n    ? console.log(\"new user is updated without new profile image\")\r\n    : userDetail.profilePicture.map(async (data, index) => {\r\n        \r\n        \r\n      //for Image File to when when we do update picture\r\n      return fs.unlink(path.join(mainPath, data.filePath), (err) => {\r\n          if (err) {\r\n            console.log(\"error occur\", err);\r\n          }\r\n          return console.log(\"file is deleted successully\");\r\n        });\r\n        \r\n      });\r\n\r\n  //update user\r\n  await User.updateOne(\r\n    { _id: id },\r\n    {\r\n      $set: {\r\n        username: username,\r\n        email: email,\r\n        login: true,\r\n        gender: gender,\r\n        address: address,\r\n        profilePicture: filesArray ? filesArray : [],\r\n      },\r\n    }\r\n  );\r\n\r\n  const updatedData = await User.findById(id);\r\n  res.status(200).json({\r\n    _id: id,\r\n    username: updatedData.username,\r\n    email: updatedData.email,\r\n    address: updatedData.address,\r\n    gender: updatedData.gender,\r\n    profilePicture: updatedData.profilePicture,\r\n    login: updatedData.login,\r\n  });\r\n  // console.log(\"request user token is\", token);\r\n  // console.log(\"updated data user result is\", updatedData);\r\n});\r\n\r\n//for img file format\r\nconst fileSizeFormatter = (bytes, decimal) => {\r\n  if (bytes === 0) {\r\n    return \"0 byte\";\r\n  }\r\n  const dm = decimal || 2;\r\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"YB\", \"ZB\"];\r\n  const index = Math.floor(Math.log(bytes) / Math.log(1000));\r\n  return (\r\n    parseFloat((bytes / Math.pow(1000, index)).toFixed(dm)) + \"-\" + sizes[index]\r\n  );\r\n};\r\n\r\n// for all deletepost\r\n//@route Delete/api/deletepost/:id\r\nconst deleteUserAccount = async (req, res) => {\r\n  // const id = req.params.id;\r\n  const id = req.user.id;\r\n  // console.log(\"id is\",id)\r\n  const userDetail = await User.findById(id);\r\n  // console.log(\"user detail id\",userDetail)\r\n\r\n  /* Check for user */\r\n  if (!req.user) {\r\n    res.status(401);\r\n    throw new Error(\"user not found\");\r\n  }\r\n    userDetail.profilePicture === []||userDetail.profilePicture[0] === '' || userDetail.profilePicture.length === 0\r\n      ? console.log(\"file is empty file\")\r\n      : userDetail.profilePicture.map(async (data) => {\r\n          \r\n          return fs.unlink(path.join(mainPath, data.filePath), (err) => {\r\n          // return fs.unlink(path.join(data.filePath), (err) => {\r\n            if (err) {\r\n              console.log(\"error occur\", err);\r\n            }\r\n\r\n            return console.log(\"file is deleted successully\");\r\n          });\r\n        });\r\n\r\n  //if someone delete post , the favorite data also need to delete\r\n  // await FavModel.deleteMany({ postId: id }).exec();\r\n\r\n  await User.findByIdAndRemove(id).exec();\r\n  res.status(200).json( \"User Account Deleted Successfully\");\r\n  // res.send();\r\n};\r\n\r\n\r\n\r\n\r\nmodule.exports = {getAllUser,registerUser,loginUser,updateUser,deleteUserAccount}"]}