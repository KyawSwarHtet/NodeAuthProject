{"version":3,"sources":["userController.js"],"names":["jwt","require","fs","mainPath","User","bcrypt","asyncHandler","req","res","render","path","registerUser","_req$body","username","email","password","regeneratorRuntime","async","_context","prev","next","body","trim","abrupt","status","json","message","test","length","awrap","find","then","result","hash","hashedPassword","save","console","log","err","newUser","stop","_req$body2","user","_context2","findOne","sent","t0","compare","updateOne","_id","id","login","loginUser","token","generateToken","sign","concat","process","env","JWT_SECRET","expiresIn","updateUser","_req$body3","address","gender","updatedData","_context3","$set","findById","profilePicture","updateUserProfile","userDetail","filesArray","file","_context4","undefined","fileName","filename","filePath","fileType","fileSizeFormatter","size","push","unlink","join","bytes","decimal","dm","index","Math","floor","pow","toFixed","findByIdAndRemove","exec","module","exports","getAllUser","deleteUserAccount"],"mappings":"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","file":"userController.min.js","sourcesContent":["const jwt = require(\"jsonwebtoken\")\r\nconst fs = require(\"fs\");\r\nconst asyncHandler = require(\"express-async-handler\");\r\nconst mainPath = require(\"./baseFilepath\");\r\nconst User = require('../model/userModel')\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst path = require(\"path\");\r\n\r\n\r\n\r\nconst getAllUser = (req,res) => {\r\n    res.render(\"user/register\", {\r\n        pageTitle: \"Register\",\r\n        path:\"/register\"\r\n        \r\n    })\r\n}\r\n\r\n//Register user\r\n//@route Post/api/users/\r\nconst registerUser = asyncHandler(async (req, res) => {\r\n  let { username, email, password} = req.body;\r\n\r\n  username = username.trim();\r\n  email = email.trim();\r\n  password = password.trim();\r\n\r\n  if (!username || !email || !password) {\r\n  return  res.status(404).json({\r\n      status: \"FAILED\",\r\n      message: \"Empty input Fields!\",\r\n    });\r\n \r\n  }\r\n\r\n  //checking user name\r\n  if (!/^[a-zA-Z ]*$/.test(username)) {\r\n   return res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Invalid name entered\",\r\n    });\r\n  }\r\n\r\n  //checking email\r\n  if (!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(email)) {\r\n  return  res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Invalid email entered\",\r\n    });\r\n  }\r\n  //checking password length\r\n  if (password.length < 8) {\r\n   return res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Password is too short!\",\r\n    });\r\n  }\r\n  \r\n  //find user email from database\r\n    await User.find({ email })\r\n      .then((result) => {\r\n        if (result.length) {\r\n          //A user already exits\r\n        return  res.status(400).json({\r\n            status: \"FAILED\",\r\n            message: \"User with the provided email already exists\",\r\n          })\r\n\r\n        } \r\n          //to create a new user\r\n          //password handling\r\n          const saltRounds = 10;\r\n          bcrypt\r\n            .hash(password, saltRounds)\r\n            .then((hashedPassword) => {\r\n              const newUser = new User({\r\n                username,\r\n                email,\r\n                password: hashedPassword,\r\n              });\r\n              newUser\r\n                .save()\r\n                .then((result) => {\r\n                  //handle account verification\r\n                  console.log(\"user  post is success\");\r\n                 \r\n                  res.status(201).json(result);\r\n                  //  res.redirect(\"/register\");\r\n                 \r\n                })\r\n                .catch((err) => {\r\n                  res.status(400).json({\r\n                    status: \"FAILED\",\r\n                    message: \"An error occurred while saving user account!\",\r\n                  });\r\n                });\r\n            })\r\n            .catch((err) => {\r\n              res.status(400).json({\r\n                status: \"FAILED\",\r\n                message: \"An error occurred while hashing password!\",\r\n              });\r\n            });\r\n        \r\n      })\r\n      .catch((err) => {\r\n        res.status(400).json({\r\n          status: \"FAILED\",\r\n          message: \"An error occured while checking for existing user!\",\r\n        });\r\n      });\r\n  \r\n});\r\n\r\n//@route Post/api/users/login\r\nconst loginUser = asyncHandler(async (req, res) => {\r\n  let {  email, password } = req.body;\r\n  email = email.trim();\r\n  password = password.trim();\r\n\r\n  if (email == \"\" || password == \"\") {\r\n   return res.status(400).json({\r\n      status: \"FAILED\",\r\n      message: \"Empty credentials supplied\",\r\n    })\r\n  }\r\n\r\n    /* Check for user email*/\r\n    const user = await User.findOne({ email });\r\n    if (user && (await bcrypt.compare(password,user.password))) {\r\n     \r\n        User.updateOne({ _id: user.id }, { login: true })\r\n          .then(() => {\r\n            res.status(201).json({\r\n              _id: user.id,\r\n              username: user.username,\r\n              email: user.email,             \r\n              login: true,\r\n              token: generateToken(user._id),\r\n            });\r\n          })\r\n          .catch((err) => {\r\n            res.status(400).json({\r\n              status: \"FAILED\",\r\n              message: \"An error occur while updating login data update\",\r\n            });\r\n          });\r\n    } else {\r\n      res.status(400).json({\r\n        status: \"FAILED\",\r\n        message: \"Email, Password is something wrong\",\r\n      });\r\n    }\r\n  \r\n});\r\n\r\n/*Generate JWT */\r\nconst generateToken = (id) => {\r\n  return jwt.sign({ id }, `${process.env.JWT_SECRET}`, {\r\n    expiresIn: \"30d\",\r\n  });\r\n};\r\n\r\n//update user information fucntion\r\nconst updateUser = asyncHandler(async (req, res) => {\r\n  const { username,address,gender  } = req.body;\r\n    const id = req.user.id;\r\n\r\n  /* Check for user */\r\n  if (!req.user) {\r\n    return res.status(404).json({\r\n      status: \"FAILED\",\r\n        message: \"user not found\",    \r\n   })\r\n  }\r\n     //update user\r\n  await User.updateOne(\r\n    { _id: id },\r\n    {\r\n      $set: {\r\n        username: username,\r\n        login: true,\r\n        gender: gender,\r\n        address: address,\r\n      },\r\n    }\r\n  );\r\n  const updatedData = await User.findById(id);\r\n  res.status(200).json({\r\n    _id: id,\r\n    username: updatedData.username,\r\n    email: updatedData.email,\r\n    address: updatedData.address,\r\n    gender: updatedData.gender,\r\n    profilePicture: updatedData.profilePicture,\r\n    login: updatedData.login,\r\n  });\r\n});\r\n\r\n//update user profile img fucntion\r\nconst updateUserProfile = asyncHandler(async (req, res) => {\r\n  const profilePicture = req.file;\r\n  // console.log(\"profile picture\",profilePicture)\r\n    const id = req.user.id;\r\n \r\n  const userDetail = await User.findById(id);\r\n\r\n  /* Check for user */\r\n  if (!req.user) {\r\n    return res.status(404).json({\r\n      status: \"FAILED\",\r\n        message: \"user not found\",    \r\n   })\r\n  }\r\n\r\n  let filesArray = [];\r\n  if (profilePicture !== undefined && profilePicture !== []) {\r\n    const file = {\r\n      fileName: profilePicture.filename,\r\n      filePath: profilePicture.path,\r\n      fileType: profilePicture.mimetype,\r\n      fileSize: fileSizeFormatter(profilePicture.size,2),\r\n    };\r\n    filesArray.push(file);\r\n\r\n    if (userDetail.profilePicture[0] !== \"\") {\r\n         //for Image File to when when we do update picture\r\n      fs.unlink(path.join(mainPath, userDetail.profilePicture[0].filePath), (err) => {\r\n          if (err) {\r\n          return  console.log(\"error occur\", err);\r\n          }\r\n          console.log(\"file is deleted successully\");\r\n        });     \r\n    }\r\n    //update user\r\n  await User.updateOne(\r\n    { _id: id },\r\n    {\r\n      $set: {\r\n        profilePicture: filesArray,\r\n      },\r\n    }\r\n  );\r\n  }\r\n  const updatedData = await User.findById(id);\r\n  res.status(200).json({\r\n    _id: id,\r\n    username: updatedData.username,\r\n    email: updatedData.email,\r\n    address: updatedData.address,\r\n    gender: updatedData.gender,\r\n    profilePicture: updatedData.profilePicture,\r\n    login: updatedData.login,\r\n  });\r\n});\r\n\r\n//for img file format\r\nconst fileSizeFormatter = (bytes, decimal) => {\r\n  if (bytes === 0) {\r\n    return \"0 byte\";\r\n  }\r\n  const dm = decimal || 2;\r\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"YB\", \"ZB\"];\r\n  const index = Math.floor(Math.log(bytes) / Math.log(1000));\r\n  return (\r\n    parseFloat((bytes / Math.pow(1000, index)).toFixed(dm)) + \"-\" + sizes[index]\r\n  );\r\n};\r\n\r\n// for all deletepost\r\n//@route Delete/api/deletepost/:id\r\nconst deleteUserAccount = async (req, res) => {\r\n  // const id = req.params.id;\r\n  const id = req.user.id;\r\n  // console.log(\"id is\",id)\r\n  const userDetail = await User.findById(id);\r\n  // console.log(\"user detail id\",userDetail)\r\n\r\n  /* Check for user */\r\n  if (!req.user) {\r\n     return res.status(404).json({\r\n      status: \"FAILED\",\r\n        message: \"user not found\",    \r\n   }) \r\n  }\r\n  userDetail.profilePicture[0] === '' || userDetail.profilePicture.length === 0\r\n      ? console.log(\"file is empty file\")\r\n      :       \r\n       fs.unlink(path.join(mainPath, userDetail.profilePicture[0].filePath), (err) => {\r\n          // return fs.unlink(path.join(data.filePath), (err) => {\r\n            if (err) {\r\n            return  console.log(\"error occur\", err);\r\n            }\r\n             console.log(\"file is deleted successully\");\r\n          });\r\n\r\n  await User.findByIdAndRemove(id).exec();\r\n  res.status(200).json( \"User Account Deleted Successfully\");\r\n  // res.send();\r\n};\r\n\r\n\r\nmodule.exports = {getAllUser,registerUser,loginUser,updateUser,updateUserProfile,deleteUserAccount}"]}